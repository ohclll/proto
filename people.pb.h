// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: people.proto

#ifndef PROTOBUF_people_2eproto__INCLUDED
#define PROTOBUF_people_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace learn {

// Internal implementation detail -- do not call these.
    void protobuf_AddDesc_people_2eproto();

    void protobuf_AssignDesc_people_2eproto();

    void protobuf_ShutdownFile_people_2eproto();

    class Person;

// ===================================================================

    class Person : public ::google::protobuf::Message {
    public:
        Person();

        virtual ~Person();

        Person(const Person &from);

        inline Person &operator=(const Person &from) {
            CopyFrom(from);
            return *this;
        }

        inline const ::google::protobuf::UnknownFieldSet &unknown_fields() const {
            return _unknown_fields_;
        }

        inline ::google::protobuf::UnknownFieldSet *mutable_unknown_fields() {
            return &_unknown_fields_;
        }

        static const ::google::protobuf::Descriptor *descriptor();

        static const Person &default_instance();

        void Swap(Person *other);

        // implements Message ----------------------------------------------

        Person *New() const;

        void CopyFrom(const ::google::protobuf::Message &from);

        void MergeFrom(const ::google::protobuf::Message &from);

        void CopyFrom(const Person &from);

        void MergeFrom(const Person &from);

        void Clear();

        bool IsInitialized() const;

        int ByteSize() const;

        bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream *input);

        void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream *output) const;

        ::google::protobuf::uint8 *SerializeWithCachedSizesToArray(::google::protobuf::uint8 *output) const;

        int GetCachedSize() const { return _cached_size_; }

    private:
        void SharedCtor();

        void SharedDtor();

        void SetCachedSize(int size) const;

    public:

        ::google::protobuf::Metadata GetMetadata() const;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        // required string name = 1;
        inline bool has_name() const;

        inline void clear_name();

        static const int kNameFieldNumber = 1;

        inline const ::std::string &name() const;

        inline void set_name(const ::std::string &value);

        inline void set_name(const char *value);

        inline void set_name(const char *value, size_t size);

        inline ::std::string *mutable_name();

        inline ::std::string *release_name();

        inline void set_allocated_name(::std::string *name);

        // optional int32 age = 2;
        inline bool has_age() const;

        inline void clear_age();

        static const int kAgeFieldNumber = 2;

        inline ::google::protobuf::int32 age() const;

        inline void set_age(::google::protobuf::int32 value);

        // repeated int32 likenum = 3;
        inline int likenum_size() const;

        inline void clear_likenum();

        static const int kLikenumFieldNumber = 3;

        inline ::google::protobuf::int32 likenum(int index) const;

        inline void set_likenum(int index, ::google::protobuf::int32 value);

        inline void add_likenum(::google::protobuf::int32 value);

        inline const ::google::protobuf::RepeatedField<::google::protobuf::int32> &
                likenum() const;

        inline ::google::protobuf::RepeatedField<::google::protobuf::int32> *
                mutable_likenum();

        // @@protoc_insertion_point(class_scope:learn.Person)
    private:
        inline void set_has_name();

        inline void clear_has_name();

        inline void set_has_age();

        inline void clear_has_age();

        ::google::protobuf::UnknownFieldSet _unknown_fields_;

        ::std::string *name_;
        ::google::protobuf::RepeatedField<::google::protobuf::int32> likenum_;
        ::google::protobuf::int32 age_;

        mutable int _cached_size_;
        ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

        friend void protobuf_AddDesc_people_2eproto();

        friend void protobuf_AssignDesc_people_2eproto();

        friend void protobuf_ShutdownFile_people_2eproto();

        void InitAsDefaultInstance();

        static Person *default_instance_;
    };
// ===================================================================


// ===================================================================

// Person

// required string name = 1;
    inline bool Person::has_name() const {
        return (_has_bits_[0] & 0x00000001u) != 0;
    }

    inline void Person::set_has_name() {
        _has_bits_[0] |= 0x00000001u;
    }

    inline void Person::clear_has_name() {
        _has_bits_[0] &= ~0x00000001u;
    }

    inline void Person::clear_name() {
        if (name_ != &::google::protobuf::internal::kEmptyString) {
            name_->clear();
        }
        clear_has_name();
    }

    inline const ::std::string &Person::name() const {
        return *name_;
    }

    inline void Person::set_name(const ::std::string &value) {
        set_has_name();
        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }
        name_->assign(value);
    }

    inline void Person::set_name(const char *value) {
        set_has_name();
        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }
        name_->assign(value);
    }

    inline void Person::set_name(const char *value, size_t size) {
        set_has_name();
        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }
        name_->assign(reinterpret_cast<const char *>(value), size);
    }

    inline ::std::string *Person::mutable_name() {
        set_has_name();
        if (name_ == &::google::protobuf::internal::kEmptyString) {
            name_ = new ::std::string;
        }
        return name_;
    }

    inline ::std::string *Person::release_name() {
        clear_has_name();
        if (name_ == &::google::protobuf::internal::kEmptyString) {
            return NULL;
        } else {
            ::std::string *temp = name_;
            name_ = const_cast< ::std::string *>(&::google::protobuf::internal::kEmptyString);
            return temp;
        }
    }

    inline void Person::set_allocated_name(::std::string *name) {
        if (name_ != &::google::protobuf::internal::kEmptyString) {
            delete name_;
        }
        if (name) {
            set_has_name();
            name_ = name;
        } else {
            clear_has_name();
            name_ = const_cast< ::std::string *>(&::google::protobuf::internal::kEmptyString);
        }
    }

// optional int32 age = 2;
    inline bool Person::has_age() const {
        return (_has_bits_[0] & 0x00000002u) != 0;
    }

    inline void Person::set_has_age() {
        _has_bits_[0] |= 0x00000002u;
    }

    inline void Person::clear_has_age() {
        _has_bits_[0] &= ~0x00000002u;
    }

    inline void Person::clear_age() {
        age_ = 0;
        clear_has_age();
    }

    inline ::google::protobuf::int32 Person::age() const {
        return age_;
    }

    inline void Person::set_age(::google::protobuf::int32 value) {
        set_has_age();
        age_ = value;
    }

// repeated int32 likenum = 3;
    inline int Person::likenum_size() const {
        return likenum_.size();
    }

    inline void Person::clear_likenum() {
        likenum_.Clear();
    }

    inline ::google::protobuf::int32 Person::likenum(int index) const {
        return likenum_.Get(index);
    }

    inline void Person::set_likenum(int index, ::google::protobuf::int32 value) {
        likenum_.Set(index, value);
    }

    inline void Person::add_likenum(::google::protobuf::int32 value) {
        likenum_.Add(value);
    }

    inline const ::google::protobuf::RepeatedField<::google::protobuf::int32> &
    Person::likenum() const {
        return likenum_;
    }

    inline ::google::protobuf::RepeatedField<::google::protobuf::int32> *
    Person::mutable_likenum() {
        return &likenum_;
    }


// @@protoc_insertion_point(namespace_scope)

}  // namespace learn

#ifndef SWIG
namespace google {
    namespace protobuf {


    }  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_people_2eproto__INCLUDED
